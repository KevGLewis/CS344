#!/bin/bash
exec > >(tee -a ./p1grading_result) 2>&1 # Copy all output to ./p1grading_result

# Parse any args
nocolor=1
while [ $# -gt 0 ]
do
  if [[ $1 == "-nocolor" ]]
  then
    nocolor=0
  fi
  shift
done

###############################################################################
# Begin helper functions
#   generate() - Generates a matrix
#   perror() - prints error messages
#   failed() - prints failed test message
#   passed() - prints passed test message
#   result() - if $? == 0, calls passed(), otherwise calls failed()
#   comment() - prints comment to output
#   unit() - prints unit test headers
###############################################################################

function generate(){
  # NAME
  #   generate - generate a matrix of a specified size
  # SYNOPSIS
  #   generate ROWS COLS RANGE
  # DESCRIPTION
  #   Outputs a matrix with ROWS and COLS as dimensions. If RANGE is an integer, the entries
  #   of the matrix will be random integers in (-RANGE,+RANGE). If RANGE is a string starting
  #   with 'Z' or 'z', the matrix will be populated with zeroes. If RANGE is a string starting
  #   with 'O' or 'o', the matrix will be populated with ones. If RANGE is a string starting
  #   with 'D' or 'd', the matrix will be a diagonal matrix with ones along the diagonal entries.
  # AUTHOR
  #   Written by Ryan Gambord (gambordr@oregonstate.edu)

  [ $# -ne 3 ] && echo "invalid number of arguments" >&2      # This is equivalent to using an if statement.
                                                              # The right side of the && operator will not
                                                              # be evaluated unless the left side is true.
  for arg in $1 $2
  do
    [[ $arg =~ [^0-9]+ ]] && echo "argument '$arg' is not an integer" >&2
  done

  y=0
  while [ $y -lt $1 ]
  do
    x=0
    ((y++))
    while [ $x -lt $2 ]
    do
      ((x++))
      case $3 in
        [oO]*) echo -n 1;;
        [zZ]*) echo -n 0;;
        [dD]*) [ $x -eq $y ] && echo -n 1 || echo -n 0;;
        *) if [[ "$3" =~ [^0-9]+ ]]
             then
               echo "invalid RANGE" >&2
               exit 1
             else
               echo -n $(( (RANDOM-32767/2) % $3 ))
             fi;;
      esac
      if [ $x -ne $2 ]
      then
        echo -ne "\t"
      else
        echo
      fi
    done
  done

}

function perror(){
  # NAME
  #   perror - print a stack trace and error message
  # SYNOPSIS
  #   perror [STRING]
  # DESCRIPTION
  #   Echoes the STRING(s) to standard error with a stack trace for debugging.
  #   The value of the status flag $? is not changed by perror.
  # AUTHOR
  #   Written by Ryan Gambord (gambordr@oregonstate.edu)

  status=$? # Capture status of previous command
  echo -e "\e[36mTraceback (most recent call last):\e[0m" >&2
  i=${#BASH_LINENO[@]} # Get number of items in stack trace

  # This section prints a stack trace of the current execution stack
  while
    [ $i -gt 0 ] # Iterate to the top of the stack
  do
    until # Loop until we get to the bottom of caller stack (this is safer than offsetting $i)
      ((i--))
      info=($(caller $i)) # Get caller info
    do :; done # Do nothing

    echo "  File \"${info[2]}\", line ${info[0]}, in ${info[1]}()" >&2 # Print caller info
    if [ $i -ne 0 ] # Check if we're at the top of the stack (perror call is at top)
    then
      echo "    "$(head "${info[2]}" -n ${info[0]} | tail -n 1) >&2 # Print trace if not at top
    else
      echo -en "\e[31mERROR\e[0m: " >&2 # Print error message if at top
      [ $# -gt 0 ] && echo "$*" >&2 || echo "(no error message specified)" >&2
    fi
  done
  exit 1
}

function failed(){
  [ $nocolor -eq 0 ] || echo -ne "\033[31m"
  echo -e "\tFailed: $@"
  [ $nocolor -eq 0 ] || echo -ne "\033[0m"
}

function passed(){
  [ $nocolor -eq 0 ] || echo -ne "\033[32m"
  echo -e "\tPassed: $@"
  [ $nocolor -eq 0 ] || echo -ne "\033[0m"
}

function result(){
  val=$?
  pts=$2
  if [ $# -lt 2 ] 
  then 
    pts=1
  fi
  if [ $val -eq 0 ]
  then
    passed "$1" "($pts/$pts)"
    ((score += pts))
    ((total += pts))
  else
    failed "$1" "(0/$pts)"
    ((total += pts))
  fi
}

function comment(){
  [ $nocolor -eq 0 ] || echo -ne "\033[0;96m"
  echo -e "# $@"
  [ $nocolor -eq 0 ] || echo -ne "\033[0m"
}
  
unit_count=0
function unit(){
  ((unit_count++))
  [ $nocolor -eq 0 ] || echo -ne "\033[4m"
  echo -e "Unit test $unit_count: $@"
  [ $nocolor -eq 0 ] || echo -ne "\033[0m"
  comment "(running score = $score/$total)"
}



###############################################################################
# End helper functions                                                        #
# Begin script                                                                #
###############################################################################

# Print banner

if [ $nocolor -eq 0 ]
then
  echo -e "┏┓ ┏━╸┏━╸╻┏┓╻┏┓╻╻┏┓╻┏━╸   ┏┳┓┏━┓╺┳╸┏━┓╻╻ ╻   ╺┳╸┏━╸┏━┓╺┳╸\n┣┻┓┣╸ ┃╺┓┃┃┗┫┃┗┫┃┃┗┫┃╺┓   ┃┃┃┣━┫ ┃ ┣┳┛┃┏╋┛    ┃ ┣╸ ┗━┓ ┃ \n┗━┛┗━╸┗━┛╹╹ ╹╹ ╹╹╹ ╹┗━┛   ╹ ╹╹ ╹ ╹ ╹┗╸╹╹ ╹    ╹ ┗━╸┗━┛ ╹"
else
  echo -e "[0;1;35;95m┏┓[0m [0;1;31;91m┏[0;1;33;93m━╸[0;1;32;92m┏━[0;1;36;96m╸╻[0;1;34;94m┏┓[0;1;35;95m╻┏[0;1;31;91m┓╻[0;1;33;93m╻┏[0;1;32;92m┓╻[0;1;36;96m┏━[0;1;34;94m╸[0m   [0;1;31;91m┏┳[0;1;33;93m┓┏[0;1;32;92m━┓[0;1;36;96m╺┳[0;1;34;94m╸┏[0;1;35;95m━┓[0;1;31;91m╻╻[0m [0;1;33;93m╻[0m   [0;1;36;96m╺[0;1;34;94m┳╸[0;1;35;95m┏━[0;1;31;91m╸┏[0;1;33;93m━┓[0;1;32;92m╺┳[0;1;36;96m╸[0m\n[0;1;31;91m┣┻[0;1;33;93m┓┣[0;1;32;92m╸[0m [0;1;36;96m┃╺[0;1;34;94m┓┃[0;1;35;95m┃┗[0;1;31;91m┫┃[0;1;33;93m┗┫[0;1;32;92m┃┃[0;1;36;96m┗┫[0;1;34;94m┃╺[0;1;35;95m┓[0m   [0;1;33;93m┃┃[0;1;32;92m┃┣[0;1;36;96m━┫[0m [0;1;34;94m┃[0m [0;1;35;95m┣[0;1;31;91m┳┛[0;1;33;93m┃┏[0;1;32;92m╋┛[0m    [0;1;35;95m┃[0m [0;1;31;91m┣╸[0m [0;1;33;93m┗[0;1;32;92m━┓[0m [0;1;36;96m┃[0m \n[0;1;33;93m┗━[0;1;32;92m┛┗[0;1;36;96m━╸[0;1;34;94m┗━[0;1;35;95m┛╹[0;1;31;91m╹[0m [0;1;33;93m╹╹[0m [0;1;32;92m╹[0;1;36;96m╹╹[0m [0;1;34;94m╹[0;1;35;95m┗━[0;1;31;91m┛[0m   [0;1;32;92m╹[0m [0;1;36;96m╹╹[0m [0;1;34;94m╹[0m [0;1;35;95m╹[0m [0;1;31;91m╹[0;1;33;93m┗╸[0;1;32;92m╹╹[0m [0;1;36;96m╹[0m    [0;1;31;91m╹[0m [0;1;33;93m┗━[0;1;32;92m╸┗[0;1;36;96m━┛[0m [0;1;34;94m╹[0m "
fi

# Initialize score and total variables
score=0
total=0

# Check for existence/executability of matrix file
if [ ! -r matrix ] || [ ! -x matrix ]
then
  perror "matrix: permission error"
  exit 0
fi

tmp1="$(mktemp --tmpdir p1grading_XXXXX)"
tmp2="$(mktemp --tmpdir p1grading_XXXXX)"
tmp3="$(mktemp --tmpdir p1grading_XXXXX)"
tmp4="$(mktemp --tmpdir p1grading_XXXXX)"


###############################################################################

unit "matrix multiply test"

m1="$(generate 10 10 d)"
m2="$(generate 10 15 100)"

echo "$m1" > "$tmp1"
echo "$m2" > "$tmp2"

[[ "$m2" == "$(./matrix multiply $tmp1 $tmp2)" ]]
result "I * M == M" 5

m2="$(generate 15 10 100)"
echo "$m2" > "$tmp2"
[[ "$m2" == "$(./matrix multiply $tmp2 $tmp1)" ]]
result "M * I == M" 5


m1="$(generate 30 14 z)"
m2="$(generate 14 12 60)"
m3="$(generate 30 12 z)"

echo "$m1" > "$tmp1"
echo "$m2" > "$tmp2"

[[ "$m3" == "$(./matrix multiply $tmp1 $tmp2)" ]]
result "0 * M == 0" 5


m1="-80	85	-94	93	28	88	47	37	9	8	51	-39	-63	56	-72	-39	80	-77	-22	70	44	-47	57	62	-77
-66	22	-30	10	-16	-26	16	-93	2	-87	32	-26	-52	99	-59	8	4	62	-66	-73	-46	-7	-88	-14	94
-41	82	45	-37	-18	-66	0	99	-28	42	-13	-22	67	52	30	87	95	-14	-7	-68	2	-12	-98	-49	79
-33	40	-76	80	97	18	-63	39	-74	99	60	-64	31	-88	32	74	97	-66	21	11	45	-5	-21	-4	-12
-78	8	5	-13	-79	-67	-23	-40	-80	13	-73	-62	-38	-13	-77	40	-61	88	81	-6	72	-71	-40	53	-26
-85	2	46	-79	-95	15	-86	35	-57	12	-94	-1	-9	-42	52	0	38	65	1	41	-52	-1	-92	-28	57
60	71	-22	-90	-3	-53	-16	-90	98	-88	53	-81	-67	-51	-24	-74	90	36	99	-57	59	-14	10	-90	-53
-23	-84	-29	2	-19	96	4	-6	-54	-73	38	-6	99	-57	63	40	-83	19	-15	80	-90	34	68	-22	-78
2	-74	-18	-45	-16	12	-99	8	98	59	72	20	-51	37	-28	56	11	79	0	94	-48	10	69	60	-22
68	-48	12	-14	51	-11	10	-97	-88	-87	9	-77	-99	79	-38	75	-48	-78	38	-51	-3	-47	66	-5	-52
-87	-93	1	93	13	77	31	79	-97	-73	-69	7	97	-24	-14	-7	-40	53	58	-14	-78	33	26	51	-48
17	-18	-90	-27	86	9	-97	51	27	-26	-81	-44	-34	-28	71	-56	-17	-88	3	89	14	59	-7	-45	-47
-5	96	-80	30	-1	43	31	-21	70	94	2	16	49	46	-67	69	0	64	-53	32	-94	96	-76	87	21
-1	72	35	67	-23	15	51	-3	-75	4	65	-44	-1	-43	66	-21	-88	-59	-29	-25	30	-57	21	-81	-76
-36	94	59	-2	86	25	-10	53	63	-24	67	49	-37	-39	-39	-14	67	-77	-76	74	46	-34	-3	85	-54
-26	-48	-34	-24	-75	67	33	6	43	-82	-25	58	82	-13	47	66	18	-39	57	-29	-8	85	15	-98	-83
-21	9	-7	86	4	72	17	-73	-64	71	-48	65	-38	-51	-2	-10	7	-69	-21	-33	-96	-26	37	25	-23
-52	-72	23	-46	7	70	12	11	-36	-38	28	71	-22	46	-40	-86	70	81	81	-34	76	-32	-90	92	77
35	-13	-63	42	63	97	-52	94	49	69	-66	25	21	42	98	93	15	-35	-13	90	-4	65	-35	34	-10
-15	-36	-49	-2	-42	-64	43	78	-31	-56	-89	-9	37	-8	-55	-4	17	74	79	55	17	46	6	85	34
49	-53	81	36	-10	-82	-48	-4	-50	11	-11	62	46	-64	74	-18	13	-76	0	87	92	-65	-37	58	50
-68	-6	62	8	93	58	80	35	55	45	21	41	0	88	-13	-47	36	45	43	-25	-40	-25	-81	-8	-40
-85	-30	-4	-17	73	-30	15	97	-64	63	81	86	3	-40	-36	7	83	43	-91	42	0	77	96	-77	10
56	46	-10	12	0	-21	2	-6	7	72	65	14	-67	2	0	53	-36	92	-52	-30	59	-86	-13	-61	-94
-74	-78	50	-78	36	81	-19	11	81	19	78	-55	-69	66	41	4	92	74	-58	-43	24	25	-74	-58	95"

m2="-46	19	8	23	22	-11	34	10	-36	-90	58	-23	-73	-73	-92	40	78	-43	-59	34	0	-83	72	0	-23
89	-13	42	-49	52	15	37	68	-90	85	-29	37	53	67	92	-61	-69	16	-91	81	-96	-48	30	63	-4
60	70	92	-43	91	-21	85	-38	-13	16	73	50	55	-21	79	56	-39	-15	94	-32	-57	-3	-19	0	97
87	86	-58	-11	-47	-50	-36	-67	-47	-83	-79	-44	-63	75	-80	-67	-27	22	4	-50	30	-69	39	-12	6
51	-94	26	3	-36	-50	-65	-66	36	-11	62	-39	5	4	65	85	-9	-42	82	41	-19	-43	-86	-71	16
86	-30	-46	59	56	81	-95	-97	-42	71	28	52	-15	-36	3	-81	-33	-5	-75	-73	-3	-17	-83	70	-71
-37	66	4	50	61	-92	86	-20	85	-74	-1	-41	39	73	-49	34	-41	29	-65	47	44	-48	-4	98	66
-73	-34	32	17	3	80	-45	-20	65	59	-14	-15	-60	62	5	-56	-51	70	-98	5	55	67	-67	-95	-51
13	54	15	-72	-67	48	98	45	17	48	45	37	99	87	-96	-75	36	-82	65	-72	88	83	-29	-14	-62
-43	-18	-77	73	-59	-42	4	-45	68	-15	15	71	-20	7	-80	21	-32	63	-11	73	34	3	63	68	60
-75	65	88	90	-28	-68	-14	57	-11	12	-97	3	83	76	-53	-42	-35	24	-35	-89	-96	58	-3	70	52
-71	18	-37	12	-72	14	93	32	63	47	64	-14	15	62	55	69	-75	-83	1	39	85	80	25	-98	-19
-9	-71	-87	35	-47	-11	-48	-8	-80	-68	-53	59	-38	-64	6	5	14	60	-70	-18	28	44	-2	1	-71
3	89	0	17	-16	-24	30	58	-67	-29	8	-5	30	-75	31	-62	7	-81	89	66	92	71	-34	20	41
-34	-11	-70	0	73	80	43	29	-67	-9	6	-94	-19	-46	44	-45	69	51	-78	-66	71	48	60	-51	-27
21	-90	-37	-35	21	-25	29	96	26	-90	-46	45	89	69	-20	99	98	-91	-40	-54	45	-42	51	-39	-71
-32	3	10	40	63	42	-3	-55	-53	-8	-98	-48	-43	-50	34	95	-98	95	83	55	-75	-61	-91	28	43
-88	66	9	-83	84	4	-47	-48	42	-11	-9	-85	0	-68	-45	-69	-52	68	94	34	4	94	-42	73	-50
26	-56	75	-14	-4	-92	72	-8	75	-79	49	47	-55	79	57	-53	8	98	85	12	-47	-54	-61	-24	55
72	31	18	-57	-85	-76	-65	46	14	-64	-61	81	92	89	-76	-96	29	-57	98	-21	-75	-66	14	19	-7
39	-24	-64	-85	80	-75	-48	57	-5	-52	-60	-73	27	-56	-90	-43	41	-55	-26	-47	-31	96	20	76	-4
17	-20	-98	28	87	70	54	-45	-61	90	2	48	0	97	53	-48	67	86	16	50	97	69	-8	48	-11
70	-26	-63	55	62	-70	-41	-28	-46	-93	-54	-69	90	-52	11	98	28	64	-31	76	-59	-67	44	-77	-85
-65	54	57	90	0	6	-70	77	-90	31	-3	87	-24	28	-84	23	0	36	71	-76	-84	12	95	49	-95
77	32	-46	-1	-28	81	15	-58	30	92	-36	-29	7	57	58	-70	60	11	11	63	-72	-3	-29	23	76"

m3="22965	9925	9346	19084	-9241	-22200	-36903	4840	-17439	-3760	-35169	5378	12600	18991	-22989	-14725	-32343	1170	-2937	-4396	-26805	-23470	-8985	20005	-7504
880	30761	12175	-10504	-1443	14140	9769	4237	-4832	26530	-6612	-12224	9775	-1188	14763	-14504	-5753	-19864	21746	7281	500	13720	-14866	23709	21727
-9033	-13102	-124	-6371	9272	23489	19677	6070	1264	16454	-13560	922	-8722	1698	32792	4132	-10006	12433	-15426	17814	6717	12988	-14819	593	22482
11783	-40738	-14880	15690	-7899	-8331	-36285	-9546	-6428	-12619	-35913	2784	-17376	12908	-4454	9870	-4642	26274	-21466	-8609	-24396	-25865	-780	-25	448
-1276	-1038	16703	-27882	7215	-26322	-10871	16460	17761	-17116	-2243	7755	-5261	-9371	-10386	-5338	-1291	2751	22528	-2512	-21509	-412	11762	17965	5066
-5136	-7103	-255	-20259	8776	42398	77	-9822	7926	34747	5216	10583	-14472	-8855	31169	-17432	-7493	16197	10568	2730	-1897	13094	-12927	-1666	5970
360	-1799	34125	-26362	25516	-10741	23804	8095	-691	-2552	2953	-21933	8654	-14659	5222	-1985	-2520	6886	16187	6950	-31028	-7076	-21627	15455	15922
848	-17111	-17574	14713	-545	-685	-26151	-6875	-9975	-19816	-7325	8565	5982	-3161	-2395	-3037	16148	9460	-24889	-29229	12651	-5344	4650	-15432	-36871
-16765	11515	8292	3744	-19397	-1659	-11255	14721	5488	-1125	-4057	18644	28033	8904	-30314	-5209	8153	-9628	39049	-12067	-1570	15887	3261	-5141	-24360
17593	-6852	20227	6133	12954	-34998	750	13276	-5882	-38695	11443	-10186	7710	-23947	6911	37162	24979	-29165	7330	-600	-14134	-39266	8709	-10992	10773
-369	-11620	-10411	15335	4309	2728	-30188	-33425	964	-11467	844	3646	-31615	149	13207	-1787	-12522	34973	-975	-11384	17085	-3307	-17114	-19353	-25133
17332	-33041	-13076	-11537	-13530	19009	-18179	-2934	-5603	8477	11143	-190	-12810	304	6621	-16515	24148	-7021	-2448	-2873	14418	-5757	-7791	-30304	-16958
-6475	10715	-13824	12207	-19061	15461	70	6461	-11482	23484	-6500	39111	7910	35755	-18773	-21063	-6039	546	4878	10977	19056	7629	7790	34095	-18612
13667	-1085	515	1508	12389	-21233	-1840	2936	-6831	-16663	-8074	-12920	3468	-4394	-27	-4065	-5894	1869	-50965	-14144	-6933	-15192	18645	4134	11128
10327	4857	28804	1641	-7760	-3323	-13194	17760	-12322	22858	-8966	16024	26871	25153	-5110	9878	-28011	-20824	7434	-18171	-32353	-3025	-4412	-830	-7018
-1661	-23976	-25870	-1377	13205	13390	23373	1051	-1759	-9005	2316	1772	1038	4759	15361	1770	12214	3348	-26808	-13522	44371	13043	-12637	-17474	-22149
13006	-2049	-14014	26626	-10428	-172	-2331	-22127	-3373	575	8922	7956	-13718	3907	8380	27389	-17717	5587	-11905	7024	-389	-36078	16064	-7341	2178
-21234	19490	21361	5777	7470	6996	-9582	-12574	14386	23977	7143	-6457	-19467	-10249	7108	-16446	-28066	9779	39085	-5292	-18801	30944	-34163	22496	17968
7388	-22586	-32992	4524	-13345	25762	-15259	939	-9852	1620	1859	17200	-8712	15878	-12332	-18121	20442	-9515	-8709	-12004	37161	4037	1846	-17026	-33204
-11895	58	681	-7467	4107	-3420	-9721	-302	10751	-10808	-9672	2001	-16882	12518	-7593	-11014	3469	25696	20308	12852	-2101	2624	-5053	190	-14209
-164	2607	-1822	-6818	-15689	-11559	-2459	13706	-3064	-18735	-5615	26	-10923	-3822	-11462	11007	12019	-10753	6484	-20223	-21451	-4704	27280	-15647	10788
-10770	15639	21011	5213	-6157	-4369	12354	-17687	19721	11972	21356	5276	-897	7982	11080	-8174	-37729	817	28742	3704	18163	16758	-37289	8967	22292
-13448	-11410	-18040	16558	2038	-2575	-16333	-23440	20123	9673	-26702	-18295	17314	13159	13797	25471	-26248	21741	-3577	28368	130	13603	-17888	-12320	5062
-20432	7774	7523	-15477	5045	-21824	847	17301	15529	-18691	-616	-18991	12855	-13920	-29755	5548	-10819	-21413	-15771	-3257	5292	8643	15855	10524	-697
-7616	14863	3840	-4490	17884	34495	2052	-19149	9604	39327	-1303	-14717	15286	-11968	8785	-20204	-4881	-3407	26948	-9991	7408	39516	-44128	22859	22855"

echo "$m1" > "$tmp1"
echo "$m2" > "$tmp2"

[[ "$m3" == "$(./matrix multiply $tmp1 $tmp2)" ]]
result "m3 == m1 * m2 (hardcoded matrix)" 20

comment "Final grade: $score/$total"

# Remove temp files
for f in $tmp{1..4}
do
  rm "$f"
done

exit $score
echo
echo
