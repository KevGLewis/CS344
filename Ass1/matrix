#!/bin/bash
#Matrix

function uponExit(){
	rm -f *.tmp
}

trap uponExit INT TERM EXIT

function tempCreate(){
# Name: tempcreate
# Purpose: Creates the temporary file names

# The following script from https://stackoverflow.com/questions/4632028/how-to-create-a-temporary-directory

TMP="temp$$.tmp"
TMPTwo="tempTwo$$.tmp"
TMPThree="tempThree$$.tmp"
TMPCol="tempcol$$.tmp"
TMPRow="temprow$$.tmp"
}

tempCreate

function stdinSave(){
# NAME: stdinSave - Save a matrix to a temporary file
# If there are no arguments, then it is assumed data is passed by stdin
# Save stdin to a temporary file for easier manipulation.
# This particular step can be refactored for better optimization later
if [ "$#" = "0" ]; then
	while read num 
	do
		echo "$num" > $TMP
	done < /dev/stdin
	MatrixOne=$TMP
else
	MatrixOne=$1
fi

# Determine the Number of Columns and Number of rows
# In the Matrix
nCols=$(head -n 1 $MatrixOne | wc -w)
nRows=$( cat $MatrixOne | wc -l)
}

function divide(){
# NAME: divide - Property divides two numbers
# INPUT: Two numbers in inOne and inTwo
# OUTPUT: Division result (integer) in outOne

inOne=$1
inTwo=$2

if [ $inOne -gt "0" ]; then
	outOne="$((($inOne + ($inTwo / 2)) / $inTwo))"
else
	outOne="$((($inOne - ($inTwo / 2)) / $inTwo))"
fi

echo $outOne

}


function matrixAvg(){
# Matrix Average: Determines the average of whatever matrix file
# name is input in argument 1
# The average is sent to stdOut

input=$1

#First, find the number of columns in the file.
sum=0
size=0

while IFS=$'\t' read -r -a myArray
do
	for i in "${myArray[@]}"
	do
		sum=$(expr $sum + $i)
		((size++))
	done
done < $input

outOne=$(divide $sum $size)
echo $outOne
}

function mean(){
stdinSave $1

#First, find the number of columns in the file.
sum=0
size=0

# Save each column to a temporary file
# Then Sum all numbers in temporary file
# and Output the Sum

for ((i=1; i<=$nCols; i++))
	do
		cut -d$'\t' "-f$i" $MatrixOne >> $TMPCol
		tempSave=$(matrixAvg $TMPCol)
		printf	"%s" "$tempSave"
		if [ $i -ne $nCols ]; then
			printf "\t"
		else
			echo
		fi
	done
}


function dims(){
stdinSave $1

echo "$nCols $nRows"
}

function transposeHelp(){
# NAME: transpose help - take a column matrix, rotates it, and adds it to an existing
# matrix file
# INPUT: Argument 1 - Matrix file to be appended to another file
# Argument 2 - Output matrix file

input=$1
output=$2

# Read the column matrix, and for each item append it to 
# The file, once all of the items have been added, ad a new line
# escape character

counter=0;

while read num
do
	if [ $counter -ne 0 ]; then
		echo -n -e "\t" >> $output
	fi
	
	echo -n -e "$num" >> $output
	((counter++))
done < $input

echo -n -e "\n" >> $output
}

function transpose(){
stdinSave $1
for ((i=1; i<=$nCols; i++))
	do
		cut -d$'\t' "-f$i" $MatrixOne > $TMPCol
		transposeHelp $TMPCol $TMPTwo
	done
cat "$TMPTwo"
}

function addAndAppend(){
# NAME: Adds two row files together and appends them to a 
# file specified by the user
# INPUTS: Arguments 1 and 2 are the two row file names, Arg 3
# is the temporary file to be appended. Arg 4 is the number
# of Columns

numOne=0
numTwo=0

for ((j=1; j<=$4; j++))
	do
		numOne=$(cut -d$'\t' "-f$j" $1)
		numTwo=$(cut -d$'\t' "-f$j" $2)
		sum=$(($numOne + $numTwo))
			printf "%s" "$sum" >> $3
		if [ $j -ne $4 ]; then
			printf "\t"  >> $3
		else
			echo >> $3
		fi
	done


}

function loadTwoMatrices(){	
# NAME: Load Two Matrices - Loads two matrices (Matrix File Names)
# Store in Argument 1 and Argument 2	
# Load the Matrices and Determine the Sizes

MatrixOne=$1
MatrixTwo=$2

nColOne=$(head -n 1 $MatrixOne | wc -w)
nRowOne=$( cat $MatrixOne | wc -l)
	
nColTwo=$(head -n 1 $MatrixTwo | wc -w)
nRowTwo=$( cat $MatrixTwo | wc -l)

}

function add(){
# NAME: Add - Adds two matrices (contained in separate files)
# GENERAL DESCRIPTION: Saves each row to a temporary file, adds the two files together
# and appends results to a third temporary file, then displays the end result.

loadTwoMatrices $1 $2

for ((i=1; i<=$nRowOne; i++))
	do
		head "-$i" $MatrixOne | tail -1 > $TMPTwo 
		head "-$i" $MatrixTwo | tail -1 > $TMPThree
		addAndAppend $TMPTwo $TMPThree $TMP $nColOne
	done
cat $TMP
}

function multiplyHelper(){
# NAME: Adds two row files together and appends them to a 
# file specified by the user
# INPUTS: Arguments 1 and 2 are the two row file names, Arg 3
# is the number of columns

sumTemp=0

for ((j=1; j<=$4; j++))
	do
		numOne=$(cut -d$'\t' "-f$j" $1)
		numTwo=$(cut -d$'\t' "-f$j" $2)
		sumTemp=$(($numOne * $numTwo))
	done

cat "$sumTemp"
}

function multiply(){
# NAME: Multiply - Multiplies two matrices together
# General Description Break off the column of one matrix, convert it
# to a row file, and then multiply them together

tempAdd=0
sum=0

# First Transpose the first matrix
transpose $1 > $TMPRow

loadTwoMatrices $TMPRow $2

for ((i=1; i<=$nRowOne; i++))
	do
		head "-$i" $MatrixOne | tail -1 > $TMPTwo 
		head "-$i" $MatrixTwo | tail -1 > $TMPThree
		tempAdd=$(multiplyhelper $TMPTwo $nColOne) 
		sum=$(($sum + $tempAdd))
	done
cat sum
}

$1 "${@:2}"
